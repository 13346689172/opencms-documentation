<?xml version="1.0" encoding="UTF-8"?>

<DocumentationHtmls xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="opencms://system/modules/com.alkacon.opencms.documentation/schemas/documentation-html.xsd">
  <DocumentationHtml language="en">
    <Html name="Html0">
      <links>
        <link name="link0" internal="false" type="A">
          <target><![CDATA[https://jstl.java.net/]]></target>
        </link>
      </links>
      <content><![CDATA[<p>We could add more language version, e.g., <code>hello_fr.properties</code> for French. You may have noted that for the English version we did not add <code>_en</code> to the file name. Omitting the locale specification makes this file the default localization. When, for example in our setting, we ask for the Spanish localization of <code>hello.world</code>, then we get "Hello world!", because the file with <code>hello_es.properties</code> is missing, and thus <code>hello.properties</code> is used.</p>
<p>To glue the properties files together to a resource bundle, all of them have to be placed in the same folder that is accessible for the servlet container.<span class="footnote">If we consider a setting with a servlet container as for OpenCms.</span> Typically, all are placed below the folder <code>{webapp home}/WEB-INF/classes/</code>. The subfolder structure below the <code>classes/</code> together with the name of the properties files specify the resource bundle's name. For example, if we place our <code>hello_{locale}.properties</code> files in the folder <code>my/demo/bundle/</code>, they make up the resource bundle <code>my.demo.bundle.hello</code>.</p>
<p>We can now access the bundle <code>my.demo.bundle.hello</code> for example a JSP using the <code>&lt;fmt:&gt;</code>-taglib from the <a href="%(link0)">JSTL</a>. To print out a localized "Hello world!" (or "Hallo Welt!"), we could write the following JSP.</p>]]></content>
    </Html>
  </DocumentationHtml>
</DocumentationHtmls>
