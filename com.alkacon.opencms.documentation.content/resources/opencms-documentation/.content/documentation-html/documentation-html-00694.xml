<?xml version="1.0" encoding="UTF-8"?>

<DocumentationHtmls xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="opencms://system/modules/com.alkacon.opencms.documentation/schemas/documentation-html.xsd">
  <DocumentationHtml language="en">
    <Html name="Html0">
      <links>
        <link name="link0" internal="true" type="A">
          <target><![CDATA[/sites/default/opencms-documentation/background/the-module-system/index.html]]></target>
          <uuid>efef33a2-b05f-11e4-b42e-0242ac11002b</uuid>
          <anchor><![CDATA[sec_one_module_one_functionality]]></anchor>
        </link>
      </links>
      <content><![CDATA[<p>The main idea of the approach is to separate structure and layout. Basically, for a website, you build:</p>
<ul>
<li>One module containing the content type definitions, in particular providing all schemas and resource/explorer type configuration.</li>
<li>One module providing formatters and formatter configurations, as well as the template JSP and all the things concerned with layout.</li>
</ul>
<p>Taking this approach, you can reuse the schema module and just exchange the layouts to build up new websites. This may also nicely interplay with module cloning and is for example the way the modules of the demo websites of OpenCms 9.0 and 9.5 are structured. But the approach is (not yet) as wide spread as the <a href="%(link0)">"one-module-one-functionality" approach</a>.</p>]]></content>
    </Html>
  </DocumentationHtml>
</DocumentationHtmls>
