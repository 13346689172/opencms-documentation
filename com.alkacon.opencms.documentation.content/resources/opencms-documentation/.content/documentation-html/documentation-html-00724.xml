<?xml version="1.0" encoding="UTF-8"?>

<DocumentationHtmls xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="opencms://system/modules/com.alkacon.opencms.documentation/schemas/documentation-html.xsd">
  <DocumentationHtml language="en">
    <Html name="Html0">
      <links>
        <link name="link0" internal="false" type="A">
          <target><![CDATA[https://opencms.cse.unsw.edu.au/alkacon-documentation/howto_workplace_translation/step1-workplace-translation.html]]></target>
        </link>
      </links>
      <content><![CDATA[<p>Of course, adding a single folder is not sufficient to have a new locale. In the new folder, all message bundles (Java property files) necessary for the GUI localization must be present. If whole bundles or keys are missing, English is used as default. To see how these messages are structured, browse the subtree for<code></code> <code>de</code>. In particular the <code>messages</code> subfolder is interesting. The structure is based on the different modules.</p>
<div class="alert alert-info">English message bundles are directly shipped within the workplace modules libraries (jar files), so you will not find the <code>messages</code> subfolder under <code>en</code>.</div>
<p>To put the message bundles you may add in your locale usable, you have to export your locale folder, say <code>pt</code> for Portugese, to <code>{webapp home}/WEB-INF/classes</code>. Therefor, put your localization in a module and set the export point via the module configuration. <a href="%(link0)">Here</a>'s an old (but still mostly valid) tutorial on how to add the localizations (the wizard mentiond there is not available anymore).</p>]]></content>
    </Html>
  </DocumentationHtml>
</DocumentationHtmls>
